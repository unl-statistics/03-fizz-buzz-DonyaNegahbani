---
title: "Homework: Fizzbuzz"
author: "Donya Negahbani"
format: html
---

Instructions: 

- You can answer the questions below in either R or Python. I will give you 50% extra credit if you provide answers in both languages. Otherwise, please feel free to delete the code chunks corresponding to the language you don't wish to work in.

- Once you have finished this assignment, render the document (Ctrl/Cmd-Shift-K or the Render button). 
- Commit the qmd file and any other files you have changed to the repository and push your changes.
- In Canvas, submit a link to your github repository containing the updated files.

# Introduction to Fizzbuzz

The "FizzBuzz Test" is a famous programming interview question.

> Write a program that prints the numbers from 1 to 30. But for multiples of three print "Fizz" instead of the number and for the multiples of five print "Buzz". For numbers which are multiples of both three and five print "FizzBuzz"

Start by filling in the following table for the numbers 1:30 manually, to get a feel for the task.

| Input | Output  |
|-------|---------|
| 1     |1        |
| 2     |2        |
| 3     |Fizz     |
| 4     |4        |
| 5     |Buzz     |
| 6     |Fizz     |
| 7     |7        |
| 8     |8        |
| 9     |Fizz     |
| 10    |Buzz     |
| 11    |11       |
| 12    |Fizz     |
| 13    |13       |
| 14    |14       |
| 15    |FizzBuzz |
| 16    |16       |
| 17    |17       |
| 18    |Fizz     |
| 19    |19       |
| 20    |Buzz     |
| 21    |Fizz     |
| 22    |22       |
| 23    |23       |
| 24    |Fizz     |
| 25    |Buzz     |
| 26    |26       |
| 27    |Fizz     |
| 28    |28       |
| 29    |29       |
| 30    |FizzBuzz |

: Fizzbuzz for 1:30

On paper or using a tool such as [https://excalidraw.com](https://excalidraw.com), create a program flow map for the sequence of if-statements you need to evaluate for fizzbuzz. Add the picture to the folder containing this file, and name the picture flowchart.png.
Add the picture to Git and commit/push your changes.


![Program Flow map for FizzBuzz](flowchart.png)



In the chunk below, write code which will solve this problem for a single value `x`. You should be able to change the value of x at the top of the chunk and still get the correct answer.

```{r solo-fizzbuzz-r, echo = T}
x <- 7

# FizzBuzz code goes here
if (x %% 3 == 0 & x %% 5 == 0) {
  print("FizzBuzz")
} else if (x %% 3 == 0) {
  print("Fizz")
} else if (x %% 5 == 0) {
  print("Buzz")
} else {
  print(x)
}

```


```{python solo-fizzbuzz-py, echo = T}
x = 18

# FizzBuzz code goes here

if x % 3 == 0 and x % 5 == 0:
    print("FizzBuzz")
elif x % 3 == 0:
    print("Fizz")
elif x % 5 == 0:
    print("Buzz")
else:
    print(x)

```

Modify the code above so that the result is stored in a value `y`.

```{r solo-fizzbuzz-stored-r, echo = T}
x <- 16
y <- NA
# FizzBuzz code goes here
if (x %% 3 == 0 & x %% 5 == 0) {
  y <- "FizzBuzz"
} else if (x %% 3 == 0) {
  y <- "Fizz"
} else if (x %% 5 == 0) {
  y <- "Buzz"
} else {
  y <- x
}

print(paste("For x = ", x, " my code produces ", y, sep = ""))
```


```{python solo-fizzbuzz-stored-py, echo = T}
import numpy as np
x = 15
y = np.nan

# FizzBuzz code
if x % 3 == 0 and x % 5 == 0:
    y = "FizzBuzz"
elif x % 3 == 0:
    y = "Fizz"
elif x % 5 == 0:
    y = "Buzz"
else:
    y = x

print("For x = " + str(x) + " my code produces " + str(y))

```


# A vector of FizzBuzz

The code in the previous problem only solves FizzBuzz for a single value of `x`. Extend your code using a loop so that it will work for all values in a vector `xx`, storing values in a corresponding vector `yy`.

You can copy/paste code from previous chunks to make this chunk easier.

```{r vector-fizzbuzz-r, echo = T}
xx <- 1:30
yy <- rep(NA, times = 30)

# FizzBuzz code for a vector of values
for (i in 1:30) {
  if (xx[i] %% 3 == 0 & xx[i] %% 5 == 0) {
    yy[i] <- "FizzBuzz"
  } else if (xx[i] %% 3 == 0) {
    yy[i] <- "Fizz"
  } else if (xx[i] %% 5 == 0) {
    yy[i] <- "Buzz"
  } else {
    yy[i] <- xx[i]
  }
}

res <- data.frame(x = xx, result = yy)
print(res)

```

```{python vector-fizzbuzz-py, echo = T}
import numpy as np
import pandas as pd

xx = np.array(range(1, 31))  # Array from 1 to 30
yy = [None] * 30  # Placeholder list for results

# FizzBuzz code for a vector of values
for i in range(30):
    if xx[i] % 3 == 0 and xx[i] % 5 == 0:
        yy[i] = "FizzBuzz"
    elif xx[i] % 3 == 0:
        yy[i] = "Fizz"
    elif xx[i] % 5 == 0:
        yy[i] = "Buzz"
    else:
        yy[i] = xx[i]
res = pd.DataFrame({"x": xx, "result": yy})
print(res)

```

# Functions and FizzBuzz

In the previous question, you extended your fizzbuzz code to iterate through a vector `xx` and produce a result `yy`. Can you generalize this, writing a function `fizzbuzz` that takes a variable `x` and returns a corresponding fizzbuzzified variable? Your function should be able to handle `x` that is a vector or a scalar value, and should store your solution in `yy`.

```{r function-fizzbuzz-r}
fizzbuzz <- function(x) {

  result <- rep(NA, length(x))
  for (i in 1:length(x)) {
    if (x[i] %% 3 == 0 & x[i] %% 5 == 0) {
      result[i] <- "FizzBuzz"
    } else if (x[i] %% 3 == 0) {
      result[i] <- "Fizz"
    } else if (x[i] %% 5 == 0) {
      result[i] <- "Buzz"
    } else {
      result[i] <- x[i]
    }
  }
  return(result)
}

xx <- sample(1:100, 10) 
yy <- fizzbuzz(x = xx)

res <- data.frame(x = xx, result = yy)
print(res)

```

```{python function-fizzbuzz-py}
import numpy as np
import pandas as pd
from random import choices

xx = np.array(choices(range(1, 101), k=10)) 
def fizzbuzz(x):
    y = [None] * len(x)
    for i in range(len(x)):
        if x[i] % 3 == 0 and x[i] % 5 == 0:
            y[i] = "FizzBuzz"
        elif x[i] % 3 == 0:
            y[i] = "Fizz"
        elif x[i] % 5 == 0:
            y[i] = "Buzz"
        else:
            y[i] = x[i]
    
    return y

yy = fizzbuzz(x = xx)
res = pd.DataFrame({"x": xx, "result": yy})
print(res)

```

# Defensive Programming

You cannot always assume that the person using your functions knows what they're doing. Add a check to the function you wrote in the last question so that it will handle non-numeric input by issuing an error message.

In R, you can use the function [`stopifnot()` to halt function execution if there is an error](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/stopifnot); this will give you a basic error message. 

```{r stopifnotdemo, error = T}
#FizzBuzz with stopifnot
fizzbuzz <- function(x) {
  stopifnot(is.numeric(x))
  
  result <- rep(NA, length(x))  
  for (i in 1:length(x)) {
    if (x[i] %% 3 == 0 & x[i] %% 5 == 0) {
      result[i] <- "FizzBuzz"
    } else if (x[i] %% 3 == 0) {
      result[i] <- "Fizz"
    } else if (x[i] %% 5 == 0) {
      result[i] <- "Buzz"
    } else {
      result[i] <- x[i]
    }
  }
  
  return(result)
}

xx <- sample(1:100, 10) 
yy <- fizzbuzz(xx)
res <- data.frame(x = xx, result = yy)
print(res)

tryCatch(
  {
    yy_test <- fizzbuzz(c("a", "b", "c"))
  },
  error = function(e) {
    print("Error caught: Non-numeric input detected")
    print(e)
  }
)


```

In Python, you can use a [`try:` statement with a `except:` clause](https://docs.python.org/3/tutorial/errors.html#handling-exceptions). This functions like an if-else statement, where if no error occurs, the except statement is never executed.

```{python tryexceptdemo, error = T}
import numpy as np
import pandas as pd


def fizzbuzz(x):
    y = [None] * len(x) 
    
    for i in range(len(x)):
        try:
            value = float(x[i])
            if value % 3 == 0 and value % 5 == 0:
                y[i] = "FizzBuzz"
            elif value % 3 == 0:
                y[i] = "Fizz"
            elif value % 5 == 0:
                y[i] = "Buzz"
            else:
                y[i] = value
        
        except ValueError:
            y[i] = f"Error: '{x[i]}' is not a number."
    
    return y

xx = np.random.choice(range(1, 101), 10, replace=False)
yy = fizzbuzz(xx)
res = pd.DataFrame({"x": xx, "result": yy})
print(res)

xx_1 = [1, 15, 'hello', 23, 'FizzBuzz', 45, 'world', 9, 'Buzz', 25]
yy_1 = fizzbuzz(xx_1)
res_1 = pd.DataFrame({"x": xx_1, "result": yy_1})
print(res_1)

```

See more examples of this in the [Input Validation](https://srvanderplas.github.io/stat-computing-r-python/part-gen-prog/05-functions.html#input-validation) section of the textbook.


```{r function-error-fizzbuzz-r}
fizzbuzz <- function(x) {
  result <- rep(NA, length(x))
  
  for (i in 1:length(x)) {
    value <- suppressWarnings(as.numeric(x[i]))
    if (is.na(value)) {
      stop(paste("Error:", x[i], "is not a valid number.")) 
    } else {
      if (value %% 3 == 0 && value %% 5 == 0) {
        result[i] <- "FizzBuzz"
      } else if (value %% 3 == 0) {
        result[i] <- "Fizz"
      } else if (value %% 5 == 0) {
        result[i] <- "Buzz"
      } else {
        result[i] <- as.character(value)  
      }
    }
  }
  
  return(result)
}


xx <- sample(1:100, 10) 
yy <- fizzbuzz(xx)
res <- data.frame(x = xx, result = yy)
print(res)

xx_1 <- c(1, 15, 'hello', 23, 'FizzBuzz', 45, 'world', 9, 'Buzz', 25)  
tryCatch({
  yy_1 <- fizzbuzz(xx_1)
  res_1 <- data.frame(x = xx_1, result = yy_1)
  print(res_1)
}, error = function(e) {
  print(e)
})



```

```{python function-error-fizzbuzz-py}
import numpy as np
import pandas as pd

def fizzbuzz(x):
    result = [None] * len(x)  # Initialize the result list
    
    for i in range(len(x)):
        try:
            value = float(x[i])
            
            # FizzBuzz logic
            if value % 3 == 0 and value % 5 == 0:
                result[i] = "FizzBuzz"
            elif value % 3 == 0:
                result[i] = "Fizz"
            elif value % 5 == 0:
                result[i] = "Buzz"
            else:
                result[i] = value
        
        except ValueError:
            result[i] = f"Error: '{x[i]}' is not a number."
    
    return result

xx = np.random.choice(range(1, 101), 10, replace=False)
yy = fizzbuzz(xx)
res = pd.DataFrame({"x": xx, "result": yy})
print(res)

xx_1 = [1, 15, 'hello', 23, 'FizzBuzz', 45, 'world', 9, 'Buzz', 25]
yy_1 = fizzbuzz(xx_1)
res_1 = pd.DataFrame({"x": xx_1, "result": yy_1})
print(res_1)

```
